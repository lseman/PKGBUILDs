# Maintainer: Jan Alexander Steffens (heftig) <heftig@archlinux.org>

pkgbase=linux
pkgver=6.6.9.chronos
pkgrel=1
pkgdesc='Linux'
url='https://github.com/archlinux/linux'
arch=(x86_64)
license=(GPL2)
makedepends=(
    bc
    cpio
    gettext
    libelf
    pahole
    perl
    python
    tar
    xz
)
options=('!strip')
_srcname=linux-${pkgver%.*}
_srctag=v${pkgver%.*}-${pkgver##*.}
source=(
    https://cdn.kernel.org/pub/linux/kernel/v${pkgver%%.*}.x/${_srcname}.tar.{xz,sign}
    config # the main kernel config file
)
validpgpkeys=(
    ABAF11C65A2970B130ABE3C479BE3E4300411886 # Linus Torvalds
    647F28654894E3BD457199BE38DBBDC86092693E # Greg Kroah-Hartman
    83BC8889351B5DEBBB68416EB8AC08600F108CDF # Jan Alexander Steffens (heftig)
)
# https://www.kernel.org/pub/linux/kernel/v6.x/sha256sums.asc
sha256sums=('8ebc65af0cfc891ba63dce0546583da728434db0f5f6a54d979f25ec47f548b3'
    'SKIP'
    'da9d15179f3a0e1b19c57344c6e10b886d598f5256ea6f82adbe2940ccf68b34'
    'SKIP'
    '18fcff9fa723cef2feb654dae966a149f0ef0fea9dda1780d3de0ff07d4f8ab7')
b2sums=('c7deb1221716144b636018ee2936abe6397e15204c9bdb4cb5806f6bd303cd5d3f953a7da5865c4f211b866e4dfec4cd347c0a1a0a675f18b1a4ad197b099cec'
    'SKIP'
    'aab29beac241ad2a789c5d0f5536f3d3277e42ee3a0df2b32cdbfbe60bbf02e337c439f7bd6eb18bed266de4ad2751b859de00aab595b3f9565a34327b78fdbf'
    'SKIP'
    '72b204712173dd109f60c6c81a10dc24c64eba7c2be8182a520b52f31ba2ecc4082fc711656a7e4893aac26120f9271c1fda3e37ad94236db95b14a6fdb56a82')

export KBUILD_BUILD_HOST=archlinux
export KBUILD_BUILD_USER=$pkgbase
export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"
export BUILD_FLAGS=(
    CC=clang
    LD=ld.lld
    LLVM=1
    LLVM_IAS=1
)

prepare() {

    cd $srcdir/$_srcname
    #echo $PWD
    # Copy extra configuration
    cp ../../conf_extra .

    echo "Setting version..."
    echo "-$pkgrel" >localversion.10-pkgrel
    echo "${pkgbase#linux}" >localversion.20-pkgname

    export SRC_DIR=$PWD
    echo $PWD
    cd ../../patches

    for file in *.patch; do
        if [[ -f "$file" ]]; then
            echo "Applying patch $file..."
            # Apply the patch from the source directory
            patch -Np1 -d "$SRC_DIR" <"$file"
        fi
    done
    cd $SRC_DIR

    echo "Setting config..."
    cp ../config .config

    echo "Enabling CachyOS config..."
    scripts/config -e CACHY
    ### Select CPU optimization
    if [ -n "$_processor_opt" ]; then
        MARCH=RAPTORLAKE
        MARCH2=M${MARCH}
        scripts/config -k -d CONFIG_GENERIC_CPU
        scripts/config -k -e CONFIG_${MARCH2}
    fi

    # ThinLTO
    echo "Setting ThinLTO..."
    scripts/config -e LTO -e LTO_CLANG -e ARCH_SUPPORTS_LTO_CLANG -e ARCH_SUPPORTS_LTO_CLANG_THIN -d LTO_NONE -e HAS_LTO_CLANG -d LTO_CLANG_FULL -e LTO_CLANG_THIN -e HAVE_GCC_PLUGINS

    _HZ_ticks=500
    echo "Setting HZ to ${_HZ_ticks}..."
    scripts/config -d HZ_300 -e "HZ_${_HZ_ticks}" --set-val HZ "${_HZ_ticks}"

    # CPU NUMBER
    echo "Setting CPU number..."
    scripts/config --set-val NR_CPUS 32

    # Full preemption
    echo "Setting full preemption..."
    scripts/config -e PREEMPT_BUILD -d PREEMPT_NONE -d PREEMPT_VOLUNTARY -e PREEMPT -e PREEMPT_COUNT -e PREEMPTION -e PREEMPT_DYNAMI

    # CPU optimization
    echo "Setting CPU optimization..."
    scripts/config -d CC_OPTIMIZE_FOR_PERFORMANCE \
        -e CC_OPTIMIZE_FOR_PERFORMANCE_O3

    # CPU governor
    echo "Setting CPU governor..."
    scripts/config -d CPU_FREQ_DEFAULT_GOV_SCHEDUTIL \
        -e CPU_FREQ_DEFAULT_GOV_PERFORMANCE

    echo "Disabling TCP_CONG_CUBIC..."
    scripts/config -m TCP_CONG_CUBIC \
        -d DEFAULT_CUBIC \
        -e TCP_CONG_BBR \
        -e DEFAULT_BBR \
        --set-str DEFAULT_TCP_CONG bbr

    # BBR3 doesn't work properly with FQ_CODEL
    echo "Disabling fq_codel by default..."
    scripts/config -m NET_SCH_FQ_CODEL \
        -e NET_SCH_FQ \
        -d DEFAULT_FQ_CODEL \
        -e DEFAULT_FQ \
        --set-str DEFAULT_NET_SCH fq

    # LRU
    echo "Enabling LRU..."
    scripts/config -e LRU_GEN -e LRU_GEN_ENABLED -d LRU_GEN_STATS

    # DAMON
    echo "Enabling DAMON..."
    scripts/config -e DAMON \
        -e DAMON_VADDR \
        -e DAMON_DBGFS \
        -e DAMON_SYSFS \
        -e DAMON_PADDR \
        -e DAMON_RECLAIM \
        -e DAMON_LRU_SORT

    # madvise
    echo "Enabling madvise..."
    scripts/config -d TRANSPARENT_HUGEPAGE_ALWAYS -e TRANSPARENT_HUGEPAGE_MADVISE

    # Disable debug
    echo "Disabling debug..."
    scripts/config -d DEBUG_INFO \
        -d DEBUG_INFO_BTF \
        -d DEBUG_INFO_DWARF4 \
        -d DEBUG_INFO_DWARF5 \
        -d PAHOLE_HAS_SPLIT_BTF \
        -d DEBUG_INFO_BTF_MODULES \
        -d SLUB_DEBUG \
        -d PM_DEBUG \
        -d PM_ADVANCED_DEBUG \
        -d PM_SLEEP_DEBUG \
        -d ACPI_DEBUG \
        -d SCHED_DEBUG \
        -d LATENCYTOP \
        -d DEBUG_PREEMPT

    echo "Enable USER_NS_UNPRIVILEGED"
    scripts/config -e USER_NS

    echo "Rewrite configuration..."
    make ${BUILD_FLAGS[*]} prepare
    yes "" | make ${BUILD_FLAGS[*]} config >/dev/null
    diff -u ../config .config || :

    echo "Enabling modprobed.db..."
    echo "Running Steven Rostedt's make localmodconfig now"
    make ${BUILD_FLAGS[*]} LSMOD=$HOME/.config/modprobed.db localmodconfig

    ### Rewrite configuration from conf_extra
    echo "Applying extra configuration settings..."
    while read -r line; do
        # Skip empty lines and lines starting with '#'
        [[ $line = \#* || $line = '' ]] && continue
        config=$(echo $line | cut -d= -f1)
        value=$(echo $line | cut -d= -f2)
        # Uncomment the configuration if it is commented out
        sed -i "/^# $config is not set/c\\$config=$value" .config
        # Change the configuration if it is already set
        sed -i "s/^$config=.*/$config=$value/" .config
    done <conf_extra

    make -s kernelrelease >version
    echo "Prepared $pkgbase version $(<version)"
}

build() {

    echo "entrou aqui "
    cd ${srcdir}/${_srcname}
    make ${BUILD_FLAGS[*]} -j$(nproc) all
}

_package() {
    pkgdesc="The $pkgdesc kernel and modules"
    depends=(
        coreutils
        initramfs
        kmod
    )
    optdepends=(
        'wireless-regdb: to set the correct wireless channels of your country'
        'linux-firmware: firmware images needed for some devices'
    )
    provides=(
        KSMBD-MODULE
        VIRTUALBOX-GUEST-MODULES
        WIREGUARD-MODULE
    )
    replaces=(
        virtualbox-guest-modules-arch
        wireguard-arch
    )

    cd $_srcname
    local modulesdir="$pkgdir/usr/lib/modules/$(<version)"

    echo "Installing boot image..."
    # systemd expects to find the kernel here to allow hibernation
    # https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7ab8128dcf99161d2344
    install -Dm644 "$(make -s image_name)" "$modulesdir/vmlinuz"

    # Used by mkinitcpio to name the kernel
    echo "$pkgbase" | install -Dm644 /dev/stdin "$modulesdir/pkgbase"

    # Use lz4 compression for the initramfs by default
    echo "Installing modules..."
    make INSTALL_MOD_PATH="$pkgdir/usr" INSTALL_MOD_STRIP=1 \
        DEPMOD=/doesnt/exist modules_install \
        INSTALL_MOD_COMPRESS=lz4

    # remove build link
    rm "$modulesdir"/build
}

_package-headers() {
    pkgdesc="Headers and scripts for building modules for the $pkgdesc kernel"
    depends=(pahole)

    cd $_srcname
    local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

    echo "Installing build files..."
    install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map \
        localversion.* version vmlinux
    install -Dt "$builddir/kernel" -m644 kernel/Makefile
    install -Dt "$builddir/arch/x86" -m644 arch/x86/Makefile
    cp -t "$builddir" -a scripts

    # required when STACK_VALIDATION is enabled
    install -Dt "$builddir/tools/objtool" tools/objtool/objtool

    # required when DEBUG_INFO_BTF_MODULES is enabled
    install -Dt "$builddir/tools/bpf/resolve_btfids" tools/bpf/resolve_btfids/resolve_btfids

    echo "Installing headers..."
    cp -t "$builddir" -a include
    cp -t "$builddir/arch/x86" -a arch/x86/include
    install -Dt "$builddir/arch/x86/kernel" -m644 arch/x86/kernel/asm-offsets.s

    install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
    install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

    # https://bugs.archlinux.org/task/13146
    install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

    # https://bugs.archlinux.org/task/20402
    install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
    install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
    install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

    # https://bugs.archlinux.org/task/71392
    install -Dt "$builddir/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h

    echo "Installing KConfig files..."
    find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

    echo "Removing unneeded architectures..."
    local arch
    for arch in "$builddir"/arch/*/; do
        [[ $arch = */x86/ ]] && continue
        echo "Removing $(basename "$arch")"
        rm -r "$arch"
    done

    echo "Removing documentation..."
    rm -r "$builddir/Documentation"

    echo "Removing broken symlinks..."
    find -L "$builddir" -type l -printf 'Removing %P\n' -delete

    echo "Removing loose objects..."
    find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

    echo "Stripping build tools..."
    local file
    while read -rd '' file; do
        case "$(file -Sib "$file")" in
        application/x-sharedlib\;*) # Libraries (.so)
            strip -v $STRIP_SHARED "$file" ;;
        application/x-archive\;*) # Libraries (.a)
            strip -v $STRIP_STATIC "$file" ;;
        application/x-executable\;*) # Binaries
            strip -v $STRIP_BINARIES "$file" ;;
        application/x-pie-executable\;*) # Relocatable binaries
            strip -v $STRIP_SHARED "$file" ;;
        esac
    done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

    echo "Stripping vmlinux..."
    strip -v $STRIP_STATIC "$builddir/vmlinux"

    echo "Adding symlink..."
    mkdir -p "$pkgdir/usr/src"
    ln -sr "$builddir" "$pkgdir/usr/src/$pkgbase"
}

pkgname=(
    "$pkgbase"
    "$pkgbase-headers"
)
for _p in "${pkgname[@]}"; do
    eval "package_$_p() {
    $(declare -f "_package${_p#$pkgbase}")
    _package${_p#$pkgbase}
  }"
done

# vim:set ts=8 sts=2 sw=2 et:
